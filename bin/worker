#!/usr/bin/env php
<?php

$autoloadFile = getcwd() . '/vendor/autoload.php';

if (!file_exists($autoloadFile)) {
    throw new \Exception('Autoload file not found');
}
require_once $autoloadFile;

use Phelixjuma\Enqueue\Worker;
use Phelixjuma\Enqueue\RedisQueue;
use Predis\Client;
use Dotenv\Dotenv;
use Monolog\Logger;
use Monolog\Handler\StreamHandler;

$options = getopt('', ['concurrency:', 'queue:', 'max_retries:', 'log_path:', 'log_level:', 'threaded:']);

$concurrency = isset($options['concurrency']) ? (int) $options['concurrency'] : 1;
$queueName = $options['queue'] ?? null;
$logPath = $options['log_path'] ?? null;
$logLevel = $options['log_level'] ?? null;
$maxRetries = $options['max_retries'] ?? null;
$threaded = $options['threaded'] ?? null;
$maxTime = $options['max_time'] ?? null;
$maxJobs = $options['max_jobs'] ?? null;

$dotenv = Dotenv::createImmutable(getcwd());
$dotenv->load();

$redisHost = getenv('REDIS_HOST') ?: ($_ENV['REDIS_HOST'] ?? "");
$redisPort = getenv('REDIS_PORT') ?: ($_ENV['REDIS_PORT'] ?? "");

$redis = new Client("tcp://$redisHost:$redisPort");

$queue = new RedisQueue($redis, $queueName);

// create a log channel
$log = new Logger($queueName);
$log->pushHandler(new StreamHandler($logPath.'/'.$queueName.'.log', Logger::DEBUG));

$worker = new Worker($queue, $threaded, $concurrency, $maxRetries, $maxTime, $maxJobs, $log);
$worker->start();
