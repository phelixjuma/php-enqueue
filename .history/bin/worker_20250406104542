#!/usr/bin/env php
<?php

$autoloadFile = getcwd() . '/vendor/autoload.php';

if (!file_exists($autoloadFile)) {
    throw new \Exception('Autoload file not found');
}
require_once $autoloadFile;

use Monolog\Handler\RotatingFileHandler;
use Monolog\Level;use Pheanstalk\Pheanstalk;
use Phelixjuma\Enqueue\BeanstalkdQueue;
use Phelixjuma\Enqueue\Worker;
use Phelixjuma\Enqueue\RedisQueue;
use Predis\Client;
use Dotenv\Dotenv;
use Monolog\Logger;
use Monolog\Handler\StreamHandler;

$options = getopt('', ['engine:', 'queue:', 'max_retries:', 'log_path:', 'log_level:','max_time:', 'max_jobs:']);

$queueEngine = $options['engine'] ?? "redis";
$queueName = $options['queue'] ?? null;
$logPath = $options['log_path'] ?? null;
$logLevel = $options['log_level'] ?? null;
$maxRetries = $options['max_retries'] ?? null;
$maxTime = $options['max_time'] ?? null;
$maxJobs = $options['max_jobs'] ?? null;

$dotenv = Dotenv::createImmutable(getcwd());
$dotenv->load();

// create a log channel
$log = new Logger($queueName);
$handler = new RotatingFileHandler($logPath.'/'.$queueName.'.log', 7, Level::Debug, true, 0777, false, RotatingFileHandler::FILE_PER_DAY, '{filename}-{date}');
$log->pushHandler($handler);


// initialize the queue
if ($queueEngine == 'beanstalkd') {

    $beanstalkdHost = getenv('BEANSTALKD_HOST') ?: ($_ENV['BEANSTALKD_HOST'] ?? "");
    $beanstalkdPort = getenv('BEANSTALKD_PORT') ?: ($_ENV['BEANSTALKD_PORT'] ?? "");

    $pheanstalk = Pheanstalk::create('127.0.0.1', $beanstalkdPort);

    $queue = new BeanstalkdQueue($pheanstalk, $queueName);

} elseif ($queueEngine == 'redis') {

    $redisHost = getenv('REDIS_HOST') ?: ($_ENV['REDIS_HOST'] ?? "");
    $redisPort = getenv('REDIS_PORT') ?: ($_ENV['REDIS_PORT'] ?? "");

    $redis = new Client("tcp://$redisHost:$redisPort");

    $queue = new RedisQueue($redis, $queueName);
    
} elseif($queueEngine == 'aws-valkey') {

    $redisHost = getenv('AWS_VALKEY_ENDPOINT') ?: ($_ENV['AWS_VALKEY_ENDPOINT'] ?? "");
    $redisPort = getenv('AWS_VALKEY_PORT') ?: ($_ENV['AWS_VALKEY_PORT'] ?? "");
    $redisUsername = getenv('AWS_VALKEY_USERNAME') ?: ($_ENV['AWS_VALKEY_USERNAME'] ?? "");
    $redisPassword = getenv('AWS_VALKEY_PASSWORD') ?: ($_ENV['AWS_VALKEY_PASSWORD'] ?? "");

    $parameters = [
        'scheme' => 'tls',  
        'host' =>   $redisHost,
        'port' =>  $redisPort
    ];

    $options = [
        'parameters' => [
            'username' => $redisUsername,
            'password' => $redisPassword
        ],
        'ssl' => [
            'verify_peer' => true, 
            'verify_peer_name' => true
        ]
    ];

    try {
        
        $redis = new Client($parameters, $options);
        
        // Test the connection
        $redis->ping();
        
        $queue = new RedisQueue($redis);

    } catch (\Predis\Connection\ConnectionException $e) {
        $log->error("Failed to connect to AWS Valkey Redis: " . $e->getMessage());
        throw new Exception("Failed to establish connection with AWS Valkey Redis queue service: " . $e->getMessage());
    } catch (Exception $e) {
        $log->error("Unexpected error while connecting to AWS Valkey Redis: " . $e->getMessage());
        throw new Exception("Unexpected error occurred while setting up AWS Valkey Redis queue: " . $e->getMessage());
    }
}

$worker = new Worker($queue, $maxRetries, $maxTime, $maxJobs, $log);
$worker->start();
